{"version":3,"sources":["logo.svg","components/Posts.js","actions/postActions.js","actions/types.js","components/Postform.js","reducers/postReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Posts","this","props","fetchPosts","nextProps","newPost","posts","unshift","postItems","map","post","Card","style","marginTop","key","id","Body","Title","title","Text","body","Component","connect","state","items","item","dispatch","fetch","then","res","json","type","payload","Postform","showModal","onChange","bind","onSubmit","e","setState","target","name","value","preventDefault","createPost","addModalClose","Button","className","variant","onClick","Modal","show","onHide","size","aria-labelledby","centered","Header","closeButton","Form","Group","Label","Control","as","rows","postData","method","headers","JSON","stringify","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","src","logo","alt","Container","Row","Col","md","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c9fc497f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { fetchPosts } from '../actions/postActions';\r\n\r\nimport { Card  } from 'react-bootstrap';\r\n\r\nclass Posts extends Component {\r\n    componentWillMount() {\r\n        this.props.fetchPosts();\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if (nextProps.newPost) {\r\n            this.props.posts.unshift(nextProps.newPost);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const postItems = this.props.posts.map(post => (\r\n            <Card style={{ marginTop: '1rem' }} key={post.id}>\r\n                <Card.Body>\r\n                    <Card.Title>{ post.title }</Card.Title>\r\n                    <Card.Text>\r\n                        { post.body }\r\n                    </Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n        ));\r\n        return (\r\n            <div>\r\n                <h1>Posts</h1>\r\n                {postItems}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    posts: state.posts.items,\r\n    newPost: state.posts.item,\r\n    \r\n});\r\n\r\nPosts.propTypes = {\r\n    fetchPosts: PropTypes.func.isRequired,\r\n    posts: PropTypes.array.isRequired,\r\n    newPost: PropTypes.object  \r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {fetchPosts})(Posts);","import { FETCH_POSTS, NEW_POST } from './types';\r\n\r\nexport const fetchPosts = () => dispatch => {\r\n    fetch('https://jsonplaceholder.typicode.com/posts')\r\n      .then(res => res.json())\r\n      .then(posts =>\r\n        dispatch({\r\n          type: FETCH_POSTS,\r\n          payload: posts\r\n        })\r\n      );\r\n};\r\n\r\nexport const createPost = (postData) => dispatch => {\r\n    fetch('https://jsonplaceholder.typicode.com/posts', {\r\n            method: 'POST',\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify(postData)\r\n        })\r\n        .then(res => res.json())\r\n        .then(post => dispatch({\r\n            type: NEW_POST,\r\n            payload: post\r\n        }));\r\n};","export const FETCH_POSTS = 'FETCH_POSTS';\r\nexport const NEW_POST = 'NEW_POST';\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { createPost } from '../actions/postActions';\r\n\r\nimport { Button, Form, Modal  } from 'react-bootstrap';\r\n\r\n\r\n\r\nclass Postform extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            title: '',\r\n            body: '',\r\n            showModal: false\r\n        };\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    \r\n    onChange(e){\r\n        this.setState({[e.target.name]: e.target.value})\r\n    }\r\n\r\n\r\n    onSubmit(e){\r\n        e.preventDefault();\r\n        \r\n        const post = {\r\n            title: this.state.title,\r\n            body: this.state.body\r\n        };\r\n        \r\n        //CALL ACTION\r\n        this.props.createPost(post);\r\n\r\n        //CLEAN FORM\r\n        this.setState({title:'', body:'', showModal: false});\r\n\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n        let addModalClose = () => this.setState({showModal: false});\r\n        let modalButton = 'modalButton';\r\n        return (\r\n            <div>\r\n                \r\n                <Button className={modalButton} variant=\"outline-dark\" onClick={()=> this.setState({showModal: true})} >Add new post</Button>\r\n\r\n               <Modal show={this.state.showModal} onHide={addModalClose} size=\"lg\" aria-labelledby=\"contained-modal-title-vcenter\" centered>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                            Adding new post\r\n                        </Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Form onSubmit={this.onSubmit}>\r\n                            <Form.Group>\r\n                                <Form.Label>Title</Form.Label>\r\n                                <Form.Control name=\"title\" type=\"text\" value={this.state.title} onChange={this.onChange} />\r\n                            </Form.Group>\r\n                            <Form.Group>\r\n                                <Form.Label>Body</Form.Label>\r\n                                <Form.Control as=\"textarea\" rows=\"3\" name=\"body\" value={this.state.body} onChange={this.onChange} />\r\n                            </Form.Group>\r\n                            <Button type=\"submit\" variant=\"outline-primary\">Submit</Button>\r\n                            <Button variant=\"outline-danger\" onClick={addModalClose}>Close</Button>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nPostform.propTypes = {\r\n    createPost: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(null, {createPost})(Postform);","import { FETCH_POSTS, NEW_POST } from '../actions/types';\r\n\r\n\r\nconst initialState = {\r\n    items: [],\r\n    item: {}\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n    switch (action.type) {\r\n        case FETCH_POSTS:\r\n            return {\r\n                ...state,\r\n                items: action.payload\r\n            };\r\n        case NEW_POST:\r\n            return {\r\n                ...state,\r\n                item: action.payload\r\n            };\r\n        default:\r\n            return state;        \r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport postReducer from './postReducer';\r\n\r\nexport default combineReducers({\r\n    posts: postReducer\r\n});\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer, \r\n    initialState, \r\n    compose(\r\n        applyMiddleware(...middleware),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n    \r\n);\r\n\r\nexport default store;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Provider } from 'react-redux';\n\nimport { Container, Row, Col } from 'react-bootstrap';\n\n\nimport Posts from './components/Posts';\nimport Postform from './components/Postform';\n\nimport store from './store';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <Container>\n        <Row>\n          <Col md={12}>\n            <Postform />\n          </Col>\n        </Row>\n        <Row>\n          <Col md={12}>\n          <Posts />\n          </Col>\n        </Row>\n      </Container>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}